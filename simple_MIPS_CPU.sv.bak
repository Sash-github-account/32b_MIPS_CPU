// reference : Computer Organization and design; David A. Patterson, John L. Hennessy
`include "alu.sv"
`include "alu_control.sv"
`include "cpu_main_ctrl.sv"
`include "pc.sv"
`include "registers.sv"

module simple_MIPS_CPU(
		       input logic 	   clk,
		       input logic 	   rst_n,
		       input logic [31:0]  instruction,
		       input logic [31:0]  data_mem_rd_data,
		       output logic [31:0] inst_mem_rd_addr,
		       output logic [31:0] data_mem_addr,
		       output logic [31:0] data_mem_wrdata,
		       output logic 	   memwrite_ctrl,
		       output logic 	   memread_ctrl
		       );


   //**********Declarations*************//
   logic [4:0] 				   write_register_in_mux;
   logic [31:0] 			   reg_write_data_mux;
   logic [31:0] 			   alu_result;
   logic [1:0] 				   aluop_ctrl;
   logic [3:0] 				   alu_ctrl;
   logic 				   alusrc_ctrl;
   logic 				   memtoreg_ctrl;
   logic 				   regdst_ctrl; 
   logic [31:0] 			   read_data_1;
   logic [31:0] 			   read_data_2;
   logic [31:0] 			   alu_op_2_mux;
   logic [31:0] 			   br_instr_offset_sign_extd;
   //***********************************//


   //************** Comb logic ***************//
   assign write_register_in_mux = (regdst_ctrl) ? instruction[15:11] : instruction[20:16];
   assign reg_write_data_mux = (memtoreg_ctrl) ? data_mem_rd_data : alu_result;
   assign br_instr_offset_sign_extd = (instruction[15]) ? {16'hffff,instruction[15:0]} : {16'h0000,instruction[15:0]};
   assign alu_op_2_mux = (alusrc_ctrl) ? br_instr_offset_sign_extd : read_data_2;
   assign data_mem_addr = alu_result;
   assign data_mem_wrdata = read_data_2;
   

   //************Instantiations*********//

   pc i_pc(
	   .clk(clk),
	   .rst_n(rst_n),
	   .instruction_jmp_imm(instruction[25:0]),
	   .instruction_beq_offset(br_instr_offset_sign_extd),
	   .branch_ctrl(branch_ctrl),
	   .zero_alu(zero_alu),
	   .jump_ctrl(jump_ctrl),
	   .cur_pc(inst_mem_rd_addr)
	   );

   registers i_registers(
			 .clk(clk),
			 .rst_n(rst_n),
			 .read_register_1(instruction[25:21]),
			 .read_register_2(instruction[20:16]),
			 .write_register(write_register_in_mux),
			 .write_data(reg_write_data_mux),
			 .regwrite_ctrl(regwrite_ctrl),
			 .read_data_1(read_data_1),
			 .read_data_2(read_data_2)
			 );

   alu i_alu(
	     .op_1(read_data_1),
	     .op_2(alu_op_2_mux),
	     .alu_ctrl(alu_ctrl),
	     .alu_result(alu_result),
	     .zero_alu(zero_alu)
	     );

   alu_control i_alu_control(
			     .instruction_funct(instruction[5:0]),
			     .alu_op_ctrl(aluop_ctrl),
			     .alu_ctrl(alu_ctrl)
			     );
   
   cpu_main_ctrl i_cpu_main_ctrl(
				 .instruction_opcode(instruction[31:26]),
				 .aluop_ctrl(aluop_ctrl),
				 .regdst_ctrl(regdst_ctrl),
				 .jump_ctrl(jump_ctrl),
				 .branch_ctrl(branch_ctrl),
				 .memread_ctrl(memread_ctrl),
				 .memwrite_ctrl(memwrite_ctrl),
				 .memtoreg_ctrl(memtoreg_ctrl),
				 .alusrc_ctrl(alusrc_ctrl),
				 .regwrite_ctrl(regwrite_ctrl)
				 );  
   //**********************************//

endmodule // simple_MIPS_CPU
