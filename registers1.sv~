module registers1(
		 input logic clk,
		 input logic rst_n,
		 input logic[4:0] read_register_1,
		 input logic[4:0] read_register_2,
		 input logic[4:0] write_register,
		 input logic[31:0] write_data,
		 input  logic regwrite_ctrl,
		 output logic[31:0] read_data_1,
		 output logic[31:0] read_data_2,
		 output logic[7:0] reg_led_o
		 );


   //**********Declarations***********//
   logic [31:0] 		    register_0;
   logic [31:0] 		    register_1;
   logic [31:0] 		    register_2;
   logic [31:0] 		    register_3;
   logic [31:0] 		    register_4;
   logic [31:0] 		    register_5;
   logic [31:0] 		    register_6;
   logic [31:0] 		    register_7;
   logic [31:0] 		    register_8;
   logic [31:0] 		    register_9;
   logic [31:0] 		    register_10;
   logic [31:0] 		    register_11;
   logic [31:0] 		    register_12;
   logic [31:0] 		    register_13;
   logic [31:0] 		    register_14;
   logic [31:0] 		    register_15;
   logic [31:0] 		    register_16;
   logic [31:0] 		    register_17;
   logic [31:0] 		    register_18;
   logic [31:0] 		    register_19;
   logic [31:0] 		    register_20;
   logic [31:0] 		    register_21;
   logic [31:0] 		    register_22;
   logic [31:0] 		    register_23;
   logic [31:0] 		    register_24;
   logic [31:0] 		    register_25;
   logic [31:0] 		    register_26;
   logic [31:0] 		    register_27;
   logic [31:0] 		    register_28;
   logic [31:0] 		    register_29;
   logic [31:0] 		    register_30;
   logic [31:0] 		    register_31;
   //*********************************//


   //************combinations logic**************//
   always_comb begin
		
	end
	assign reg_led_o = write_data[7:0];
   //********************************************//

   
   //********* Register file seq logic*************//
   always@(posedge clk) begin
      if(!rst_n) begin 
	 for(int i = 0; i < 32; i = i+1) begin
	    register_file[i] <= 32'd0;   
	 end
      end
      else begin
	 if(regwrite_ctrl) register_file[write_register] <= write_data;
      end
   end

   //**********************************************//

endmodule // registers
